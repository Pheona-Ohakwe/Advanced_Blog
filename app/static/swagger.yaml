openapi: 3.0.0
info:
  title: My Flask API
  description: API documentation for my Flask application
  version: 1.0.0

servers:
  - url: https://advanced-blog-api-python-flask-sqlalchemy.onrender.com
    description: Development server

paths:
  /token:
    post:
      summary: Obtain JWT token
      description: Endpoint to authenticate and receive a JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        '200':
          description: JWT token obtained successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '400':
          description: Bad request
        '401':
          description: Unauthorized

  /users:
    get:
      summary: Retrieve all users
      description: Endpoint to retrieve a list of all registered users.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

    post:
      summary: Create a new user
      description: Endpoint to create a new user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /users/{id}:
    get:
      summary: Retrieve a user by ID
      description: Endpoint to retrieve a user by their unique ID.
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Internal server error

    put:
      summary: Update a user by ID
      description: Endpoint to update an existing user's information by their unique ID.
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Internal server error

    delete:
      summary: Delete a user by ID
      description: Endpoint to delete an existing user by their unique ID.
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Internal server error

  /roles:
    post:
      summary: Create a new role
      description: Endpoint to create a new role.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role_name:
                  type: string
              required:
                - role_name
      responses:
        '201':
          description: Role created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error


  /posts:
      get:
        summary: Retrieve all posts
        description: Endpoint to retrieve a list of all posts.
        security:
          - BearerAuth: []
        responses:
          '200':
            description: A list of posts
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Post'
          '401':
            description: Unauthorized
          '500':
            description: Internal server error

      post:
        summary: Create a new post
        description: Endpoint to create a new post.
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostInput'
        responses:
          '201':
            description: Post created successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Post'
          '400':
            description: Bad request
          '401':
            description: Unauthorized
          '500':
            description: Internal server error

  /posts/{id}:
      get:
        summary: Retrieve a post by ID
        description: Endpoint to retrieve a post by its unique ID.
        security:
          - BearerAuth: []
        parameters:
          - name: id
            in: path
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: Post found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Post'
          '401':
            description: Unauthorized
          '404':
            description: Post not found
          '500':
            description: Internal server error

      put:
        summary: Update a post by ID
        description: Endpoint to update an existing post's information by its unique ID.
        security:
          - BearerAuth: []
        parameters:
          - name: id
            in: path
            required: true
            schema:
              type: integer
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostInput'
        responses:
          '200':
            description: Post updated successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Post'
          '400':
            description: Bad request
          '401':
            description: Unauthorized
          '404':
            description: Post not found
          '500':
            description: Internal server error

      delete:
        summary: Delete a post by ID
        description: Endpoint to delete an existing post by its unique ID.
        security:
          - BearerAuth: []
        parameters:
          - name: id
            in: path
            required: true
            schema:
              type: integer
        responses:
          '204':
            description: Post deleted successfully
          '401':
            description: Unauthorized
          '404':
            description: Post not found
          '500':
            description: Internal server error

  /comments:
      get:
        summary: Retrieve all comments
        description: Endpoint to retrieve a list of all comments.
        security:
          - BearerAuth: []
        parameters:
          - name: id
            in: path
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: A list of comments
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Comment'
          '401':
            description: Unauthorized
          '500':
            description: Internal server error

      post:
        summary: Create a new comment
        description: Endpoint to create a new comment.
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentInput'
        responses:
          '201':
            description: Comment created successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Comment'
          '400':
            description: Bad request
          '401':
            description: Unauthorized
          '404':
            description: Post not found
          '500':
            description: Internal server error

  /comments/{id}:
      get:
        summary: Retrieve a comment by ID
        description: Endpoint to retrieve a comment by its unique ID.
        security:
          - BearerAuth: []
        parameters:
          - name: id
            in: path
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: Comment found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Comment'
          '401':
            description: Unauthorized
          '404':
            description: Comment not found
          '500':
            description: Internal server error

      put:
        summary: Update a comment by ID
        description: Endpoint to update an existing comment's information by its unique ID.
        security:
          - BearerAuth: []
        parameters:
          - name: id
            in: path
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: Comment found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Comment'
          '401':
            description: Unauthorized
          '404':
            description: Comment not found
          '500':
            description: Internal server error  

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        first_name:
          type: string
        last_name:
          type: string
        username:
          type: string
        email:
          type: string
        password:
          type: string
      required:
        - first_name
        - last_name
        - username
        - email
        - password
    
    Role:
      type: object
      properties:
        id:
          type: integer
        role_name:
          type: string
      required:
        - role_name
    
    Post:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        body:
          type: string
        user_id:
          type: integer
      required:
        - title
        - body
        - user_id
    
    PostInput:
          type: object
          properties:
            id:
              type: integer
            title:
              type: string
            body:
              type: string
            user_id:
              type: integer
          required:
            - title
            - body
            - user_id

    Comment:
      type: object
      properties:
        id:
          type: integer
        content:
          type: string
        user_id:
          type: integer
        post_id:
          type: integer
      required:
        - content
        - user_id
        - post_id

    CommentInput:
      type: object
      properties:
        id:
          type: integer
        content:
          type: string
        user_id:
          type: integer
        post_id:
          type: integer
      required:
        - content
        - user_id
        - post_id

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT